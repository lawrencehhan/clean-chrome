{"ast":null,"code":"/*global chrome*/ // import { ChromeMessage, Sender } from \"./types\";\nvar messagesFromReactAppListener=function messagesFromReactAppListener(message,sender,response){console.log('[content.js]. Message received',{message:message,sender:sender});if(sender.id===chrome.runtime.id&&message.from===\"React\"&&message.message===\"\"){response(\"No censor is being applied.\");}if(sender.id===chrome.runtime.id&&message.from===\"React\"&&message.message===\"Black-Box\"){// code block here on blacking out DOM words\nresponse(\"Black-Box censor has been applied.\");}// if (\n//     sender.id === chrome.runtime.id &&\n//     message.from === Sender.React &&\n//     message.message === \"Stars\") {\n//         // code block here on blacking out DOM words\n//         response(\"Stars censor has been applied.\");\n//     }\n// if (\n//     sender.id === chrome.runtime.id &&\n//     message.from === Sender.React &&\n//     message.message === \"Transparent\") {\n//         // code block here on blacking out DOM words\n//         response(\"Transparent censor has been applied.\");\n//     }\n// if (\n//     sender.id === chrome.runtime.id &&\n//     message.from === Sender.React &&\n//     message.message === \"Strike\") {\n//         // code block here on blacking out DOM words\n//         response(\"Strike censor has been applied.\");\n//     }\n};// Fires when either the React Main.js or content.js sends a message\nchrome.runtime.onMessage.addListener(messagesFromReactAppListener);","map":{"version":3,"sources":["/Users/lawrencehan/Documents/GitHub/clean-chrome/src/content.js"],"names":["messagesFromReactAppListener","message","sender","response","console","log","id","chrome","runtime","from","onMessage","addListener"],"mappings":"AAAA,iB,CACA;AAEA,GAAMA,CAAAA,4BAA4B,CAAG,QAA/BA,CAAAA,4BAA+B,CAACC,OAAD,CAAUC,MAAV,CAAkBC,QAAlB,CAA+B,CAChEC,OAAO,CAACC,GAAR,CAAY,gCAAZ,CAA8C,CAACJ,OAAO,CAAPA,OAAD,CAAUC,MAAM,CAANA,MAAV,CAA9C,EAEA,GACIA,MAAM,CAACI,EAAP,GAAcC,MAAM,CAACC,OAAP,CAAeF,EAA7B,EACAL,OAAO,CAACQ,IAAR,GAAiB,OADjB,EAEAR,OAAO,CAACA,OAAR,GAAoB,EAHxB,CAG4B,CACpBE,QAAQ,CAAC,6BAAD,CAAR,CACH,CAEL,GACID,MAAM,CAACI,EAAP,GAAcC,MAAM,CAACC,OAAP,CAAeF,EAA7B,EACAL,OAAO,CAACQ,IAAR,GAAiB,OADjB,EAEAR,OAAO,CAACA,OAAR,GAAoB,WAHxB,CAGqC,CAC7B;AACAE,QAAQ,CAAC,oCAAD,CAAR,CACH,CAEL;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAzCD,CA2CA;AACAI,MAAM,CAACC,OAAP,CAAeE,SAAf,CAAyBC,WAAzB,CAAqCX,4BAArC","sourcesContent":["/*global chrome*/\n// import { ChromeMessage, Sender } from \"./types\";\n\nconst messagesFromReactAppListener = (message, sender, response) => {\n    console.log('[content.js]. Message received', {message, sender,})\n\n    if (\n        sender.id === chrome.runtime.id &&\n        message.from === \"React\" &&\n        message.message === \"\") {\n            response(\"No censor is being applied.\");\n        }\n\n    if (\n        sender.id === chrome.runtime.id &&\n        message.from === \"React\" &&\n        message.message === \"Black-Box\") {\n            // code block here on blacking out DOM words\n            response(\"Black-Box censor has been applied.\");\n        }\n\n    // if (\n    //     sender.id === chrome.runtime.id &&\n    //     message.from === Sender.React &&\n    //     message.message === \"Stars\") {\n    //         // code block here on blacking out DOM words\n    //         response(\"Stars censor has been applied.\");\n    //     }\n\n    // if (\n    //     sender.id === chrome.runtime.id &&\n    //     message.from === Sender.React &&\n    //     message.message === \"Transparent\") {\n    //         // code block here on blacking out DOM words\n    //         response(\"Transparent censor has been applied.\");\n    //     }\n    \n    // if (\n    //     sender.id === chrome.runtime.id &&\n    //     message.from === Sender.React &&\n    //     message.message === \"Strike\") {\n    //         // code block here on blacking out DOM words\n    //         response(\"Strike censor has been applied.\");\n    //     }\n}\n\n// Fires when either the React Main.js or content.js sends a message\nchrome.runtime.onMessage.addListener(messagesFromReactAppListener);\n"]},"metadata":{},"sourceType":"module"}