{"ast":null,"code":"import _slicedToArray from\"/Users/lawrencehan/Documents/GitHub/clean-chrome/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";/*global chrome*/import React,{useState}from'react';import ToggleButton from'./ToggleButton';import toggleData from'./toggles';import wordsData from'./wiktionaryWords';import{jsx as _jsx}from\"react/jsx-runtime\";export default function Main(){// States are kept for active censorType and content.js responseFromContent\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),censorType=_useState2[0],setCensorType=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),responseFromContent=_useState4[0],setResponseFromContent=_useState4[1];chrome.storage.sync.set({censorType:censorType});chrome.storage.onChanged.addListener(function(changes,area){console.log('-- Inside storage listener --');console.log('Changes: '+changes);});// const censorTypeStorage = censorType\n// Message passing to content.js for any updates on active censorType\nvar sendCensorMessage=function sendCensorMessage(censorMessage){// Initializing message and conditions\nvar message={from:\"React\",message:censorMessage};var queryInfo={active:true,currentWindow:true};// Sending message to content.js\nchrome.tabs&&chrome.tabs.query(queryInfo,function(tabs){var currentTabId=tabs[0].id;chrome.tabs.sendMessage(currentTabId,message,function(response){setResponseFromContent(response);console.log('content.js response: '+response);});});};// Sending words from here to content.js so the file does not need to be in 'public'\nvar sendWordsData=function sendWordsData(data){var message={from:\"React\",message:data};var queryInfo={active:true,currentWindow:true};chrome.tabs&&chrome.tabs.query(queryInfo,function(tabs){var currentTabId=tabs[0].id;chrome.tabs.sendMessage(currentTabId,message,function(response){setResponseFromContent(response);});});};sendWordsData(wordsData);// Updating states active in Main.js whenever a toggle is clicked\nfunction handleChange(event){var newCensorType=event.target.value===censorType?\"\":event.target.value;// setCensorType(prevCensorType => (\n//     event.target.value === prevCensorType ? \"\" : event.target.value\n// ))\nif(newCensorType===\"\"){setCensorType(newCensorType);sendCensorMessage(newCensorType);}else{sendCensorMessage(\"\");setCensorType(newCensorType);sendCensorMessage(newCensorType);}console.log('Current active censorType: '+newCensorType);}// Initializing the toggle elements\nvar toggleElements=toggleData.map(function(toggle){return/*#__PURE__*/_jsx(ToggleButton,{id:toggle.id,censorType:censorType,handleChange:handleChange},toggle.keyID);});return/*#__PURE__*/_jsx(\"form\",{className:\"button-box\",children:toggleElements});}","map":{"version":3,"sources":["/Users/lawrencehan/Documents/GitHub/clean-chrome/src/components/Main.js"],"names":["React","useState","ToggleButton","toggleData","wordsData","Main","censorType","setCensorType","responseFromContent","setResponseFromContent","chrome","storage","sync","set","onChanged","addListener","changes","area","console","log","sendCensorMessage","censorMessage","message","from","queryInfo","active","currentWindow","tabs","query","currentTabId","id","sendMessage","response","sendWordsData","data","handleChange","event","newCensorType","target","value","toggleElements","map","toggle","keyID"],"mappings":"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","sourcesContent":["/*global chrome*/\nimport React, { useState } from 'react'\nimport ToggleButton from './ToggleButton'\nimport toggleData from './toggles'\nimport wordsData from './wiktionaryWords'\n\n\nexport default function Main() {\n    // States are kept for active censorType and content.js responseFromContent\n    const [censorType, setCensorType] = useState(\"\")\n    const [responseFromContent, setResponseFromContent] = useState(\"\")\n    chrome.storage.sync.set({censorType})\n    chrome.storage.onChanged.addListener((changes, area) => {\n        console.log('-- Inside storage listener --')\n        console.log('Changes: ' + changes)\n    })\n    // const censorTypeStorage = censorType\n    // Message passing to content.js for any updates on active censorType\n    const sendCensorMessage = (censorMessage) => {\n        // Initializing message and conditions\n        const message = {\n            from: \"React\",\n            message: censorMessage,\n        }\n        const queryInfo = {\n            active: true,\n            currentWindow: true\n        }\n        // Sending message to content.js\n        chrome.tabs && chrome.tabs.query(queryInfo, tabs => {\n            const currentTabId = tabs[0].id\n            chrome.tabs.sendMessage(\n                currentTabId,\n                message,\n                (response) => {\n                    setResponseFromContent(response)\n                    console.log('content.js response: ' + response)\n                })\n        })\n    }\n\n    // Sending words from here to content.js so the file does not need to be in 'public'\n    const sendWordsData = (data) => {\n        const message = {\n            from: \"React\",\n            message: data,\n        }\n        const queryInfo = {\n            active: true,\n            currentWindow: true\n        }\n\n        chrome.tabs && chrome.tabs.query(queryInfo, tabs => {\n            const currentTabId = tabs[0].id\n            chrome.tabs.sendMessage(\n                currentTabId,\n                message,\n                (response) => {\n                    setResponseFromContent(response);\n                })\n        })\n    }\n    sendWordsData(wordsData)\n    \n    // Updating states active in Main.js whenever a toggle is clicked\n    function handleChange(event) {\n\n        const newCensorType = event.target.value === censorType ? \"\" : event.target.value\n        // setCensorType(prevCensorType => (\n        //     event.target.value === prevCensorType ? \"\" : event.target.value\n        // ))\n        if (newCensorType === \"\") {\n            setCensorType(newCensorType)\n            sendCensorMessage(newCensorType)\n        } else {\n            sendCensorMessage(\"\")\n            setCensorType(newCensorType)\n            sendCensorMessage(newCensorType)\n        }\n        console.log('Current active censorType: ' + newCensorType)\n    }\n\n    // Initializing the toggle elements\n    const toggleElements = toggleData.map(toggle => {\n        return <ToggleButton\n            key={toggle.keyID}\n            id={toggle.id}\n            censorType={censorType}\n            handleChange={handleChange}\n        />\n    })\n\n    return (\n        <form className=\"button-box\">\n            {toggleElements}\n        </form>\n    )\n}"]},"metadata":{},"sourceType":"module"}